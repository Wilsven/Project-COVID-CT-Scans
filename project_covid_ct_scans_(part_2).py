# -*- coding: utf-8 -*-
"""Project COVID-CT Scans (Part 2)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/141pJtCEUwMPY-lli23JyDElfDH0Dv_Ee
"""

# import libraries
import keras
import matplotlib.pyplot as plt
from keras.layers import Dense, GlobalAveragePooling2D, Dropout
from keras.applications import densenet
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Model
from keras.optimizers import Adam
from keras.callbacks import ModelCheckpoint, EarlyStopping

from sklearn.metrics import confusion_matrix, classification_report

import numpy as np

# use transfer learning with DenseNet169
base_model = densenet.DenseNet169(weights = "imagenet", include_top = False)

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.5)(x)

preds = Dense(2, activation = "sigmoid")(x)

model = Model(inputs = base_model.input, outputs = preds)

# declare batch size
BATCH_SIZE = 16

# declare ImageDataGenerator objects
train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   brightness_range = [0.2, 1.0],
                                   horizontal_flip = True)


test_datagen = ImageDataGenerator(rescale = 1./255)

# create generators 
train_generator = train_datagen.flow_from_directory("/content/drive/MyDrive/Project COVID-CT/Output/train",
                                                    target_size = (480, 480),
                                                    color_mode = "rgb",
                                                    batch_size = BATCH_SIZE,
                                                    class_mode = "categorical",
                                                    shuffle = True)

val_generator = train_datagen.flow_from_directory("/content/drive/MyDrive/Project COVID-CT/Output/val",
                                                    target_size = (480, 480),
                                                    color_mode = "rgb",
                                                    batch_size = BATCH_SIZE,
                                                    class_mode = "categorical",
                                                    shuffle = True)

test_generator = test_datagen.flow_from_directory("/content/drive/MyDrive/Project COVID-CT/Output/test",
                                                  shuffle = False)

# declare callbacks for our model training
es = EarlyStopping(monitor = "val_loss", patience = 3)
mc = ModelCheckpoint("/content/drive/MyDrive/Project COVID-CT/best_model.h5",
                     save_best_only = True)

# compile model for training 
model.compile(optimizer = Adam(learning_rate = 0.0001),
              loss = "binary_crossentropy",
              metrics = ["accuracy"])

# train our model
history = model.fit(train_generator,
                    steps_per_epoch = train_generator.samples // BATCH_SIZE,
                    validation_data = val_generator,
                    validation_steps = val_generator.samples // BATCH_SIZE,
                    epochs = 50,
                    callbacks = [es, mc])

plt.plot(history.epoch, history.history["loss"])
plt.plot(history.epoch, history.history["val_loss"], color = "orange")

plt.plot(history.epoch, history.history["accuracy"])
plt.plot(history.epoch, history.history["val_accuracy"], color = "orange")

# look at test_generator classes
test_generator.classes

# make predictions using test data
predictions = model.predict(test_generator)
predictions

# use numpy to get predicted classes out 
single_pred = np.argmax(predictions, axis = 1)
single_pred

confusion_matrix(test_generator.classes, single_pred)

# Predictions
#                0        1
# Actual  0     TN       FP
#         1     FN       TP

"""Our model is good at predicting True Positives but horrible at detecting True Negatives. In fact, it has a significant number of wrong guesses in the False Positives category.

In the case of COVID, it is, clinically speaking, more important that we avoid False Negatives. On the other hand, if our model predicts False Positives, the only downside is that the individual with the lung CT scans may have to undergo more tests. Therefore, in this case, we would prioritize the reduction of False Negatives over reduction of False Positives.
"""

print(classification_report(test_generator.classes, single_pred))

from keras.models import load_model
saved_model = load_model("/content/drive/MyDrive/Project COVID-CT/best_model.h5")
saved_model

saved_model_predictions = saved_model.predict(test_generator)

saved_single_pred = np.argmax(saved_model_predictions, axis = 1)
saved_single_pred

confusion_matrix(test_generator.classes, saved_single_pred)

print(classification_report(test_generator.classes, saved_single_pred))

"""We can see that the model saved in our best_model folder performed better than the latest model. Unsurprising!

# Recap:
## Part 1
1. Collected research data from researchers
2. Splitted the data into train, validation and test sets

## Part 2
1. Replicated <em>some</em> of the authors' methods and experimental setting
2. Completed one round of model training 
3. Acessed model performance
"""